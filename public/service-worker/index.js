import { clientsClaim } from 'workbox-core'
import { ExpirationPlugin } from 'workbox-expiration'
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching'
import { registerRoute } from 'workbox-routing'
import { StaleWhileRevalidate, CacheFirst, NetworkFirst } from 'workbox-strategies'

clientsClaim()

// Precache all of the assets generated by your build process.
precacheAndRoute(self.__WB_MANIFEST)

const MAIN_ORIGIN = 'https://pwa-three-wheat1.vercel.app'
const API_ORIGIN = 'http://localhost:8000'

// Функция для переключения между основным и локальным API
const getApiUrl = (url) => {
    const urlObj = new URL(url)
    if (urlObj.pathname.startsWith('/api/')) {
        return `${API_ORIGIN}${urlObj.pathname}`
    }
    return url
}

// Обработчик для API запросов
const apiHandler = async ({ event }) => {
    const { request } = event

    try {
        // Пробуем получить с локального сервера
        const apiUrl = getApiUrl(request.url)
        const response = await fetch(apiUrl, {
            ...request,
            headers: {
                ...request.headers,
                'Origin': MAIN_ORIGIN
            }
        })

        if (response.ok) {
            // Кэшируем успешный ответ
            const cache = await caches.open('api-cache')
            await cache.put(request, response.clone())
            return response
        }
    } catch (error) {
        console.error('Error fetching from API:', error)
    }

    // Если запрос не удался, пробуем получить из кэша
    try {
        const cachedResponse = await caches.match(request)
        if (cachedResponse) {
            return cachedResponse
        }
    } catch (error) {
        console.error('Error reading from cache:', error)
    }

    // Если всё не удалось, возвращаем резервные данные
    return new Response(JSON.stringify({
        url: 'https://www.google.com',
        text: 'Google (резервная ссылка)'
    }), {
        headers: { 'Content-Type': 'application/json' }
    })
}

// Регистрируем маршрут для API запросов
registerRoute(
    ({ url }) => url.pathname.startsWith('/api/'),
    apiHandler
)

// Остальные маршруты
registerRoute(
    ({ request }) => request.destination === 'style',
    new CacheFirst({
        cacheName: 'css-cache',
        plugins: [
            new ExpirationPlugin({
                maxEntries: 50,
                maxAgeSeconds: 30 * 24 * 60 * 60, // 30 Days
            }),
        ],
    })
)

registerRoute(
    ({ request }) => request.destination === 'script',
    new StaleWhileRevalidate({
        cacheName: 'js-cache',
    })
)

registerRoute(
    ({ request }) => request.destination === 'image',
    new CacheFirst({
        cacheName: 'images',
        plugins: [
            new ExpirationPlugin({
                maxEntries: 60,
                maxAgeSeconds: 30 * 24 * 60 * 60, // 30 Days
            }),
        ],
    })
)

registerRoute(
    ({ request }) => request.destination === 'document' || request.destination === '',
    new NetworkFirst({
        cacheName: 'others',
        networkTimeoutSeconds: 10,
    })
)

self.addEventListener('fetch', (event) => {
    console.log('Fetch event for ', event.request.url)
})

self.addEventListener('install', (event) => {
    console.log('Service worker installed')
})

self.addEventListener('activate', (event) => {
    console.log('Service worker activated')
})

self.addEventListener('message', (event) => {
    if (event.data && event.data.type === 'SKIP_WAITING') {
        self.skipWaiting()
    }
})

